import java.io.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Random;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        InputReader in = new InputReader(System.in);
        PrintWriter out = new PrintWriter(System.out);
        Task solver = new Task();
        solver.solve(in.nextInt(), in, out);
//        solver.duiPai();
        out.close();
    }

    static class Task {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            for (int t = 0; t < testNumber; t++) {
                int n = in.nextInt();
                long[][] a = new long[n][2];
                for (int i = 0; i < a.length; i++) {
                    a[i] = new long[]{in.nextLong(), i};
                }
                int[] solve = new Solution().solve(a);
                for (int v : solve) {
                    out.print(v + " ");
                }
                out.println();
            }
        }

        // 随机生成数组
        public void duiPai() {
            Random random = new Random();
            for (int t = 0; t < 100; t++) {
                int n = random.nextInt(10) + 5;
                int[] a = genArr(n, 1, 9);
                System.out.println(Arrays.toString(a));
            }
        }

        // 生成指定范围内的随机数组
        public int[] genArr(int n, int l, int r) {
            int[] arr = new int[n];
            Random random = new Random();
            for (int i = 0; i < n; i++) {
                arr[i] = random.nextInt(r - l + 1) + l;
            }
            return arr;
        }
    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
    }
}

class Solution {
    public int[] solve(long[][] a) {
        int n = a.length;
        int[] ans = new int[n];
        if (n == 1) {
            ans[0] = 1;
            return ans;
        }
        if (n == 2) {
            if (a[0][0] > a[1][0]) {
                ans[0] = 1;
            } else if (a[0][0] < a[1][0]) {
                ans[1] = 1;
            }
            return ans;
        }
        // 根据数组中的元素大小排序
        Arrays.sort(a, Comparator.comparingLong(o -> o[0]));
        long sum = 0;
        for (long[] arr : a) {
            sum += arr[0];
        }
        long max = a[n - 1][0];
        if (sum > max * 2) {
            if (sum % 2 == 0) {
                for (long[] arr : a) {
                    if (arr[0] >= 2) {
                        ans[(int) arr[1]] = 1;
                    }
                }
            } else {
                Arrays.fill(ans, 1);
            }
        } else {
            ans[(int) a[n - 1][1]] = 1;
        }
        return ans;
    }
}
